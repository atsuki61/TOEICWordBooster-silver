---
description: 
globs: 
alwaysApply: false
---
---
description: 銀フレ英単語帳作成のためのグローバルAIアシスタント設定：プロセスガイドライン、プロジェクト技術スタック、コーディング規約。
alwaysApply: true
---
# AIタスク実行プロセス（一般ガイドライン）

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>
   - 主要なタスクを簡潔に要約してください。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討してください。  
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要な要件と制約を特定してください。
   - 潜在的な課題をリストアップしてください。
   - タスク実行のための具体的なステップを詳細に列挙してください。
   - それらのステップの最適な実行順序を決定してください。
   
   ### 重複実装の防止
   実装前に以下の確認を行ってください：
   - 既存の類似機能の有無
   - 同名または類似名の関数やイベントリスナー
   - 重複するDOM操作
   - 共通化可能な処理の特定

   このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

---

3. 品質管理と問題対応
   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。

---

5. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
  ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

---

# プロジェクト: TOEIC単語カードアプリ

## 概要
- **目的**: TOEIC必須100単語を効率的に学習するためのフラッシュカードアプリケーションの開発と保守。
- **目標**: 単語学習の効果を最大化し、学習者の継続的な学習をサポートする。
- **学習データ**: 「必須の100単語.md」ファイルをベースとした単語・意味・例文のデータ。

## 技術スタック
- **HTML5**: セマンティックな構造とアクセシビリティを重視
- **CSS3**: モダンなスタイリング、レスポンシブデザイン、アニメーション
- **Vanilla JavaScript (ES6+)**: フレームワークに依存しない軽量な実装
- **Local Storage**: 学習進捗の永続化

## コーディング規約
- **HTML**:
  - セマンティックな要素を適切に使用
  - アクセシビリティ（aria属性、alt属性など）を考慮
  - クラス名は BEM 記法を推奨
- **CSS**:
  - モバイルファーストのレスポンシブデザイン
  - CSS Grid と Flexbox を活用したレイアウト
  - CSS変数（カスタムプロパティ）の活用
  - 命名はBEM記法またはセマンティックな名前を使用
- **JavaScript**:
  - ES6+ の機能を積極的に活用
  - 関数型プログラミングの考え方を取り入れる
  - 適切なエラーハンドリングを実装
  - コメントは日本語で記述

## 重要なプロジェクトファイル
- **メインHTML**: `index.html` - アプリのエントリーポイント
- **スタイルシート**: `style.css` - アプリケーション全体のスタイリング
- **JavaScript**: `script.js` - アプリケーションロジック
- **単語データ**: `必須の100単語.md` - 学習対象の単語データソース
- **設定ファイル**: `README.md` - プロジェクト説明と使用方法

## 機能要件
- **フラッシュカード機能**:
  - カードの表面（英単語）と裏面（意味・例文）の表示
  - カードめくり機能（クリック・ボタン・キーボード）
- **学習管理機能**:
  - 「覚えた」「覚えていない」の学習状況マーク
  - 学習進捗の表示とトラッキング
  - ローカルストレージでの状況保存
- **フィルタリング機能**:
  - 「すべて」「覚えた」「覚えていない」での絞り込み
- **ナビゲーション機能**:
  - 前後の単語への移動
  - 現在位置の表示
- **キーボードショートカット**:
  - スペース: カードめくり
  - 左右矢印: 単語移動
  - R/F: 学習状況マーク

## UI/UX ガイドライン
- **デザイン原則**: シンプルで直感的な操作性を重視
- **カラーパレット**: 学習に集中できる落ち着いた色合い
- **レスポンシブ**: スマートフォンからデスクトップまで対応
- **アニメーション**: カードめくりなど、学習体験を向上させる適切なアニメーション

## パフォーマンス要件
- **高速な応答**: DOM操作の最適化
- **軽量**: 外部ライブラリに依存しない実装
- **オフライン対応**: ローカルストレージによる状態管理

## 学習データ形式
単語データは以下の形式で管理：
```
英単語 | 意味 | 例文
```

## タスク支援
- **コミットメッセージ**: リポジトリに変更があった場合、会話の最後に日本語でコミットメッセージの提案を3つお願いします。可能な範囲で Conventional Commits の形式（例: `feat: 新機能を追加`, `fix: バグを修正`, `docs: ドキュメントを更新`）を意識してください。

## その他
- **回答言語**: 日本語でお願いします。
- **適用範囲**: このルールは、チャットおよび Command+K リクエストに常に適用されます。


- **学習効果の重視**: すべての変更は学習体験の向上を最優先に考慮してください。